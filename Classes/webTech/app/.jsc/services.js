// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module('myApp.services', []).factory('myJQ', [
    '$q', function($q) {
      var deferred;
      deferred = $q.defer();
      $(function() {
        return deferred.resolve($);
      });
      return deferred.promise;
    }
  ]).factory('jsBridge', [
    '$q', function($q) {
      var deferred, onBridgeReady;
      deferred = $q.defer();
      onBridgeReady = function(event) {
        var bridge;
        bridge = event.bridge;
        bridge.init();
        return deferred.resolve(bridge);
      };
      document.addEventListener('WebViewJavascriptBridgeReady', onBridgeReady, false);
      return deferred.promise;
    }
  ]).factory('cm1', [
    'CM', function(CM) {
      var cm1;
      cm1 = new CM();
      return cm1;
    }
  ]).factory('CM', [
    '$q', 'PPAttributedString', '_', 'Counter', 'jsBridge', function($q, PPAttributedString, _, Counter, jsBridge) {
      var CM;
      CM = (function() {
        function CM(args) {
          var cm, _ref, _ref1, _ref2;
          if (args == null) {
            args = {};
          }
          this.CodeMirror = CodeMirror;
          cm = (_ref = args.cm) != null ? _ref : null;
          setCodeMirrorInstance(cm);
          if (!this.cm) {
            this.deferred = (_ref1 = args.deferred) != null ? _ref1 : $q.defer();
            this.promise = (_ref2 = args.promise) != null ? _ref2 : this.deferred.promise;
            this.promise.then(function(cm) {
              return setCodeMirrorInstance(cm);
            });
          }
        }

        CM.prototype.setCodeMirrorInstance = function(cm) {
          this.cm = cm;
          this.doc = this.cm ? this.cm.doc : null;
          return this.display = this.cm ? this.cm.display : null;
        };

        CM.prototype.getTokenAt = function(position, precise) {
          if (precise == null) {
            precise = {
              precise: false
            };
          }
          return this.cm.getTokenAt(position, precise);
        };

        CM.prototype.getMode = function() {
          return this.cm.getMode();
        };

        CM.prototype.setOption = function(option, val) {
          return this.cm.setOption(option, val);
        };

        CM.prototype.on = function(event, callback) {
          return this.cm.on(event, callback);
        };

        CM.prototype.tokenize = function(string, mode) {
          var tokens;
          tokens = [];
          this.CodeMirror.runMode(string, mode, function(text, styleClass, state) {
            tokens.push({
              text: text,
              styleClass: styleClass,
              state: state
            });
          });
          return tokens;
        };

        CM.prototype.parse = function(range) {
          return this.constructor.parse(range, this);
        };

        CM.parse = function(range, cm) {
          var a, ar, as, attributedRanges, c, cssEl, end, globalRanges, pos, r, sel, spanClass, start, token, tokens, tsl, _i, _j, _k, _len, _len1, _len2, _ref;
          tokens = [];
          attributedRanges = [];
          c = new Counter({
            i: range.location + 1,
            end: range.maxEdge() + 1
          });
          while (c.i < c.end) {
            pos = cm.doc.posFromIndex(c.i);
            token = cm.getTokenAt(pos, {
              precise: true
            });
            tsl = token.string.length;
            ar = attributedRanges[attributedRanges.push(new CSAttributedRange({
              defaultContextName: 'global'
            })) - 1];
            ar.range(cm.doc.indexFromPos({
              line: pos.line,
              ch: token.start
            }), tsl);
            jsBridge.send('token string: ' + token.string);
            a = ar.attributes;
            a.token = token;
            if (tsl > 0 && (a.token.type != null) && a.token.type !== void 0) {
              sel = [];
              _ref = token.className.split(' ');
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                spanClass = _ref[_i];
                sel.push('.cm-' + spanClass);
              }
              a.cssSelector = sel[sel.length - 1];
              cssEl = $(a.cssSelector);
              jsBridge.then(function(jsBridge) {
                if (cssEl == null) {
                  jsBridge.send('There was a serious error trying to find selector "' + a.cssSelector + '".');
                } else if (cssEl.length === 0) {
                  jsBridge.send('No element could be found with the class "' + a.cssSelector + '". Trying ' + '"' + token.className + '" instead...');
                  cssEl = $(token.className);
                  if (cssEl.length === 0) {
                    jsBridge.send('No element could be found with the class "' + token.className + '" either.');
                  }
                }
              });
              a.color = cssEl.css('color').replace(')', '(').split('(')[1].split(',');
              a.color = {
                r: a.color[0],
                g: a.color[1],
                b: a.color[2]
              };
            } else {
              a.color = $('body').css('color').replace(')', '(').split('(')[1].split(',');
              a.color = {
                r: a.color[0],
                g: a.color[1],
                b: a.color[2]
              };
            }
            tokens.push(token);
            c.incrimentSafelyTo(ar.maxEdge() + 1);
          }
          globalRanges = (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = attributedRanges.length; _j < _len1; _j++) {
              ar = attributedRanges[_j];
              _results.push({
                location: ar.location,
                length: ar.length,
                maxEdge: ar.maxEdge()
              });
            }
            return _results;
          })();
          start = _.sortBy(globalRanges, function(r) {
            return r.location;
          })[0].location;
          end = _.sortBy(globalRanges, function(r) {
            return r.maxEdge;
          }).pop().maxEdge;
          r = new CSRange({
            contexts: {
              edited: {
                location: start,
                length: end - start,
                "default": true
              },
              original: CSRange.newRangeFromRange(range)
            }
          });
          for (_j = 0, _len1 = attributedRanges.length; _j < _len1; _j++) {
            ar = attributedRanges[_j];
            ar.c('local', ar.location - r.location, ar.length);
            ar.switchDefaultContext('local');
          }
          as = new PPAttributedString({
            string: cm.doc.getValue().substr(r.c('edited').location, r.c('edited').length)
          });
          for (_k = 0, _len2 = attributedRanges.length; _k < _len2; _k++) {
            ar = attributedRanges[_k];
            as.attributedRanges.push(ar);
          }
          return {
            attributedString: as,
            tokens: tokens,
            range: r
          };
        };

        CM.prototype.replaceCharacters = function(args) {
          var _ref;
          if (args == null) {
            args = {
              string: null,
              range: null,
              event: null
            };
          }
          args.cm = (_ref = args.cm) != null ? _ref : this;
          return this.constructor.replace(args);
        };

        CM.replaceCharacters = function(args) {
          var cm, e, endPos, r, s, startPos;
          if (args == null) {
            args = {
              cm: null,
              string: null,
              range: null,
              event: null
            };
          }
          cm = args.cm;
          s = args.string;
          r = args.range;
          e = args.event;
          startPos = cm.doc.posFromIndex(r.location);
          endPos = cm.doc.posFromIndex(r.maxEdge());
          jsBridge.then(function(jsBridge) {
            if (e === 'keypress') {
              jsBridge.send('keypress');
            }
          });
          return cm.doc.replaceRange(s, startPos, endPos);
        };

        CM.prototype.cursor = function(context) {
          if (context == null) {
            context = null;
          }
          return this.constructor.cursor(this, context);
        };

        CM.cursor = function(cm, context) {
          var point;
          if (context == null) {
            context = null;
          }
          cm = args.cm;
          context = args.context;
          point = {};
          point.position = context ? cm.doc.getCursor(context) : cm.doc.getCursor();
          point.location = cm.doc.indexFromPos(point.position);
          return point;
        };

        CM.prototype.selectedRanges = function(attributedRanges) {
          return this.constructor.selectedRanges(this, attributedRanges);
        };

        CM.selectedRanges = function(cm, attributedRanges) {
          var affinity, anchorPos, ar, ars, cursorAnchor, cursorHead, end, headPos, isArray, start;
          ars = attributedRanges;
          if (ars) {
            isArray = Array.isArray(ars);
            if (!isArray && typeof ars === 'object') {
              ars = [ars];
            } else if (!isArray) {
              return null;
            }
            ar = ars[0];
            affinity = ar.attributes.affinity;
            start = cm.doc.posFromIndex(ar.location);
            anchorPos = start;
            headPos = anchorPos;
            if (ar.length > 0 && (affinity === 'up' || affinity === 'down')) {
              end = cm1.doc.posFromIndex(ar.maxEdge());
              anchorPos = affinity === 'down' ? start : end;
              headPos = affinity === 'down' ? end : start;
            }
            cm1.doc.setSelection(anchorPos, headPos);
          }
          ars = [];
          cursorHead = cm.cursor().location;
          cursorAnchor = cm.cursor('anchor').location;
          if (cursorAnchor !== cursorHead) {
            start = cm.cursor('start').location;
            end = cm.cursor('end').location;
            ar = new CSAttributedRange({
              location: start,
              length: end,
              attributes: {
                affinity: cursorAnchor < cursorHead ? 'down' : 'up'
              }
            });
            ars.push(ar);
          }
          return ars;
        };

        return CM;

      })();
      return CM;
    }
  ]).factory('_', [
    function() {
      return window._;
    }
  ]).factory('Counter', [
    function() {
      var Counter;
      Counter = (function() {
        function Counter(args) {
          var _ref, _ref1;
          if (args == null) {
            args = {};
          }
          this.i = (_ref = args.i) != null ? _ref : NaN;
          this.end = (_ref1 = args.end) != null ? _ref1 : NaN;
        }

        Counter.prototype.incrimentSafelyTo = function(new_i) {
          this.i = (new_i != null) && new_i > this.i ? new_i : this.i + 1;
        };

        return Counter;

      })();
      return Counter;
    }
  ]).factory('PPAttributedString', [
    function() {
      var PPAttributedString;
      PPAttributedString = (function(_super) {
        __extends(PPAttributedString, _super);

        function PPAttributedString(args) {
          if (args == null) {
            args = {};
          }
          PPAttributedString.__super__.constructor.call(this, args);
          this.attributedRanges.unshift(new CSAttributedRange(0, this.string.length, this.defaultAttributes()));
        }

        PPAttributedString.prototype.defaultAttributes = function() {
          var color;
          color = $('body').css('color').replace(')', '(').split('(')[1].split(',');
          color = {
            r: color[0],
            g: color[1],
            b: color[2]
          };
          return {
            color: color
          };
        };

        return PPAttributedString;

      })(CSAttributedString);
      return PPAttributedString;
    }
  ]);

}).call(this);
