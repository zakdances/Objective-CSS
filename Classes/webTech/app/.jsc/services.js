// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module('myApp.services', []).factory('myJQ', [
    '$q', function($q) {
      var deferred;
      deferred = $q.defer();
      $(function() {
        return deferred.resolve($);
      });
      return deferred.promise;
    }
  ]).factory('jsBridge', [
    '$q', function($q) {
      var deferred, onBridgeReady;
      deferred = $q.defer();
      onBridgeReady = function(event) {
        var bridge;
        bridge = event.bridge;
        bridge.init();
        return deferred.resolve(bridge);
      };
      document.addEventListener('WebViewJavascriptBridgeReady', onBridgeReady, false);
      return deferred.promise;
    }
  ]).factory('CMdi', [
    '$q', function($q) {
      return $q.defer();
    }
  ]).factory('CMi', [
    'CMdi', function(CMdi) {
      return CMdi.promise;
    }
  ]).factory('CM', [
    function() {
      return CodeMirror;
    }
  ]).factory('_', [
    function() {
      return window._;
    }
  ]).factory('newNormalizedRange', [
    function() {
      return function(varA, varB) {
        var a, i;
        if (typeof varA === 'object') {
          varA = varA.location;
          varB = varA.length;
        }
        a = varB !== 0 ? (function() {
          var _i, _results;
          _results = [];
          for (i = _i = 0; 0 <= varB ? _i < varB : _i > varB; i = 0 <= varB ? ++_i : --_i) {
            _results.push(i + varA);
          }
          return _results;
        })() : varB;
        return a;
      };
    }
  ]).factory('PPAttributedString', [
    function() {
      var PPAttributedString;
      PPAttributedString = (function(_super) {
        __extends(PPAttributedString, _super);

        function PPAttributedString(args) {
          var ar;
          if (args == null) {
            args = {};
          }
          PPAttributedString.__super__.constructor.call(this, args);
          ar = new CSAttributedRange(0, this.string.length, this.defaultAttributes());
          this.attributedRanges.unshift(ar);
        }

        PPAttributedString.prototype.defaultAttributes = function() {
          var color;
          color = $('body').css('color').replace(')', '(').split('(')[1].split(',');
          color = {
            r: color[0],
            g: color[1],
            b: color[2]
          };
          return {
            color: color
          };
        };

        return PPAttributedString;

      })(CSAttributedString);
      return PPAttributedString;
    }
  ]);

}).call(this);
