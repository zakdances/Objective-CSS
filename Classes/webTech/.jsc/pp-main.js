// Generated by CoffeeScript 1.6.3
(function() {
  var ErrorBucket, PPStyler, contentBeforeEdit, root, sharedErrorBucket;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.ppEvents = $({});

  sharedErrorBucket = null;

  contentBeforeEdit = '';

  root.ppbridge = null;

  PPStyler = (function() {
    function PPStyler() {}

    PPStyler.resetCSS = function(el) {
      el.css('width', '100%');
      el.css('height', '100%');
      el.css('padding', '0');
      el.css('margin', '0');
    };

    PPStyler.styleBody = function(bodyTag) {
      bodyTag.css('background-color', '#fff');
    };

    PPStyler.styleCM = function(cm, cmScroll) {
      cm.css('background', '#f2f2f2');
      cm.css('height', '2000px !important');
      cmScroll.css('height', '2000px !important');
      cmScroll.css('overflow-x', 'auto');
    };

    return PPStyler;

  })();

  $(function() {
    var onBridgeReady;
    onBridgeReady = function(event) {
      var bridge, e, myCM, ppbridge;
      bridge = event.bridge;
      ppbridge = bridge;
      bridge.init();
      try {
        myCM = CodeMirror($('body')[0], {
          lineNumbers: true,
          autofocus: true,
          autoCloseBrackets: true
        });
      } catch (_error) {
        e = _error;
        bridge.send('error loading CodeMirror: ' + String(e));
      }
      try {
        PPStyler.styleCM($('.CodeMirror'), $('.CodeMirror-scroll'));
        PPStyler.resetCSS($('html, body'));
        PPStyler.styleBody($('body'));
      } catch (_error) {
        e = _error;
        bridge.send('error styling: ' + String(e));
      }
      if (myCM) {
        ppEvents.trigger('PPReady', [myCM, bridge]);
      }
      bridge.send('ready');
    };
    document.addEventListener('WebViewJavascriptBridgeReady', onBridgeReady, false);
  });

  ppEvents.on('PPReady', function(e, myCM, bridge) {
    sharedErrorBucket = new ErrorBucket();
    bridge.registerHandler('tokenize', function(data, responseCallback) {
      var cmContent, mode, returnData, string, tokens;
      cmContent = myCM.doc.getValue();
      mode = data.mode === 'scss' ? 'text/x-scss' : data.mode;
      string = data.string;
      if (!mode) {
        responseCallback({
          errors: ['Error: no mode specified']
        });
      }
      myCM.setOption('mode', mode);
      tokens = [];
      try {
        CodeMirror.runMode(string, mode, function(text, styleClass) {
          if (text !== ' ' && text !== '' && text !== '\n' && text !== '\t') {
            tokens.push({
              text: text,
              styleClass: styleClass
            });
          }
        });
        bridge.send(tokens.length + ' tokens collected.');
      } catch (_error) {
        e = _error;
        bridge.send(String(e));
      }
      returnData = {
        'tokens': tokens
      };
      responseCallback(returnData);
    });
  });

  ppEvents.on('PPReady', function(e, myCM, bridge) {
    sharedErrorBucket = new ErrorBucket();
    bridge.registerHandler('parse', function(data, responseCallback) {
      var cmContent, mode, returnData, string;
      cmContent = myCM.doc.getValue();
      mode = data.mode === 'scss' ? 'text/x-scss' : data.mode;
      string = data.string;
      if (!mode) {
        responseCallback({
          errors: ['Error: no mode specified']
        });
      }
      myCM.setOption('mode', mode);
      returnData = {
        'tokens': tokens
      };
      responseCallback(returnData);
    });
  });

  ErrorBucket = (function() {
    function ErrorBucket(messages, armed) {
      this.messages = messages != null ? messages : [];
      this.armed = armed != null ? armed : false;
    }

    ErrorBucket.prototype.addMessage = function(message) {
      this.messages.push = message;
    };

    ErrorBucket.prototype.printWith = function(printer) {
      printer(JSON.stringify(this.messages));
    };

    ErrorBucket.prototype.reset = function() {
      while (this.messages.length > 0) {
        this.messages.pop();
      }
      this.armed = false;
    };

    return ErrorBucket;

  })();

}).call(this);
